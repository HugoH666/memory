import usefull

def fleur(t, type_color, pixel_size):
    t.speed(100)

    if type_color == 1:
        petal_color = "#FF8C00"
    else:
        petal_color = "#00BFFF"

    # Contour noir
    usefull.row_right_squares(t, 15, pixel_size)
    t.backward(pixel_size)
    t.left(90)
    usefull.row_right_squares(t, 2, pixel_size)
    usefull.left_square(t, pixel_size)
    usefull.low_traverse(t, pixel_size)
    usefull.row_right_squares(t, 4, pixel_size)
    t.left(90)
    usefull.left_square(t, pixel_size)
    t.forward(pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    t.right(90)
    usefull.row_left_squares(t, 3, pixel_size)
    t.right(90)
    usefull.row_right_squares(t, 2, pixel_size)
    t.left(90)
    usefull.left_square(t, pixel_size)
    t.forward(pixel_size)
    usefull.row_right_squares(t, 3, pixel_size)
    usefull.left_square(t, pixel_size)
    usefull.low_traverse(t, pixel_size)
    usefull.row_right_squares(t, 2, pixel_size)
    t.left(90)
    t.forward(5*pixel_size)
    t.left(90)
    t.forward(3*pixel_size)
    usefull.right_square(t, pixel_size)
    t.forward(2*pixel_size)
    t.right(90)
    t.backward(pixel_size)
    usefull.row_right_squares(t, 6, pixel_size)
    usefull.row_left_squares(t, 2, pixel_size)
    usefull.double_walk_along_up_square_left(t, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    usefull.row_left_squares(t, 1, pixel_size)
    t.left(90)
    t.forward(pixel_size)
    usefull.row_right_squares(t, 4, pixel_size)
    usefull.row_left_squares(t, 2, pixel_size)
    t.left(90)
    t.forward(pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    usefull.row_left_squares(t, 1, pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    usefull.row_left_squares(t, 1, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    t.right(90)
    t.forward(2*pixel_size)
    t.left(90)
    usefull.row_left_squares(t, 1, pixel_size)
    usefull.row_right_squares(t, 2, pixel_size)
    usefull.row_left_squares(t, 1, pixel_size)
    usefull.double_walk_along_up_square_left(t, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    usefull.row_left_squares(t, 1, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.left(90)
    usefull.right_square(t, pixel_size)
    t.forward(2*pixel_size)
    t.left(90)
    usefull.row_left_squares(t, 2, pixel_size)
    usefull.row_right_squares(t, 4, pixel_size)
    usefull.left_square(t, pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    t.forward(2*pixel_size)
    t.left(90)
    usefull.left_square(t, pixel_size)
    t.forward(pixel_size)
    usefull.row_right_squares(t, 2, pixel_size)

    # Encrage des p√©tales
    t.color(petal_color)
    t.begin_fill()
    t.right(90)
    t.forward(pixel_size)
    t.left(90)
    t.forward(6*pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    t.forward(2*pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.left(90)
    t.forward(4*pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    t.forward(2*pixel_size)
    t.left(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.left(90)
    t.forward(2*pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    usefull.double_walk_along_up_square_left(t, pixel_size)
    t.forward(pixel_size)
    t.left(90)
    t.forward(4*pixel_size)
    usefull.walk_along_up_square_left(t, pixel_size)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(pixel_size)
    t.left(90)
    t.forward(2*pixel_size)
    t.end_fill()

    # Yeux
    t.up()
    t.left(90)
    t.forward(4*pixel_size)
    t.left(90)
    t.forward(2*pixel_size)
    t.left(180)
    t.color("#000000")
    t.down()
    usefull.row_right_squares(t, 1, pixel_size)
    usefull.row_left_squares(t, 2, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)
    t.up()
    t.forward(pixel_size)
    t.down()
    usefull.row_right_squares(t, 1, pixel_size)
    usefull.row_left_squares(t, 2, pixel_size)
    usefull.row_right_squares(t, 1, pixel_size)

    # Pied droit
    t.up()
    t.right(90)
    t.forward(7*pixel_size)
    t.left(90)
    t.color("#0BC600")
    t.down()
    t.begin_fill()
    t.forward(pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(2*pixel_size)
    t.right(90)
    t.forward(5*pixel_size)
    t.right(90)
    t.forward(2*pixel_size)
    t.right(90)
    usefull.low_traverse(t, pixel_size)
    t.right(90)
    t.forward(2*pixel_size)
    t.end_fill()

    # Corps
    t.up()
    t.left(90)
    t.forward(pixel_size)
    t.left(90)
    t.forward(4*pixel_size)
    t.left(90)
    t.down()
    usefull.row_left_squares(t, 2, pixel_size)
    t.backward(2*pixel_size)
    usefull.row_right_squares(t, 3, pixel_size)

    # Pied gauche
    t.up()
    t.right(90)
    t.forward(2*pixel_size)
    t.down()
    usefull.row_left_squares(t, 5, pixel_size)
    t.left(180)
    usefull.row_left_squares(t, 5, pixel_size)
    t.left(90)
    usefull.low_traverse(t, pixel_size)
    usefull.row_right_squares(t, 3, pixel_size)